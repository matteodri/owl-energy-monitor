package com.matteodri.owlenergymonitor.services;


import java.net.InetAddress;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.stereotype.Service;

import com.google.common.util.concurrent.AtomicDouble;

import io.micrometer.core.instrument.Gauge;
import io.micrometer.core.instrument.MeterRegistry;

/**
 * Service processing messages generated by the Owl Network.
 */

@Service
public class OwlMessageProcessorImpl implements OwlMessageProcessor {

    private static final Logger logger = LogManager.getLogger(OwlMessageProcessorImpl.class);

    private MeterRegistry meterRegistry;
    private AtomicDouble currentElectricityConsumption = new AtomicDouble(0);
    private AtomicDouble todaysElectricityConsumption = new AtomicDouble(0);
    private AtomicDouble currentBatteryLevel = new AtomicDouble(0);
    private AtomicDouble currentElectricityGenerated = new AtomicDouble(0);
    private AtomicDouble currentElectricityExported = new AtomicDouble(0);
    private AtomicDouble todaysElectricityGenerated = new AtomicDouble(0);
    private AtomicDouble todaysElectricityExported = new AtomicDouble(0);

    public OwlMessageProcessorImpl(MeterRegistry meterRegistry) {
        this.meterRegistry = meterRegistry;

        setupMetrics(meterRegistry);
    }

    @Override
    public void process(InetAddress fromAddress, String message) {
        logger.debug("Message received from {}: {}", fromAddress, message);

        // TODO parse message

        // TODO replace with real values from intuition message
        currentElectricityConsumption.set((int) (Math.random() * 100));
        todaysElectricityConsumption.set((int) (Math.random() * 100));
        currentBatteryLevel.set((int) (Math.random() * 100));
        currentElectricityGenerated.set((int) (Math.random() * 100));
        currentElectricityExported.set((int) (Math.random() * 100));
        todaysElectricityGenerated.set((int) (Math.random() * 100));
        todaysElectricityExported.set((int) (Math.random() * 100));
    }

    private void setupMetrics(MeterRegistry meterRegistry) {
        Gauge.builder("electricity_consumption_current", currentElectricityConsumption, AtomicDouble::get)
                .description("Current electricity consumption (W)").register(meterRegistry);
        Gauge.builder("electricity_consumption_today", todaysElectricityConsumption, AtomicDouble::get)
                .description("Today's electricity consumption (Wh)").register(meterRegistry);
        Gauge.builder("battery_level_current", currentBatteryLevel, AtomicDouble::get)
                .description("Current battery level (%)").register(meterRegistry);
        Gauge.builder("electricity_generated_current", currentElectricityGenerated, AtomicDouble::get)
                .description("Current electricity generation (W)").register(meterRegistry);
        Gauge.builder("electricity_exported_current", currentElectricityExported, AtomicDouble::get)
                .description("Current electricity exporting (W)").register(meterRegistry);
        Gauge.builder("electricity_generated_today", todaysElectricityGenerated, AtomicDouble::get)
                .description("Today's generated electricity (Wh)").register(meterRegistry);
        Gauge.builder("electricity_exported_today", todaysElectricityExported, AtomicDouble::get)
                .description("Today's exported electricity (Wh)").register(meterRegistry);
    }

}
